package com.example.moviesearch.domain

import android.util.Log
import com.example.moviesearch.data.MainRepository
import com.example.moviesearch.data.network.RetrofitClient
import com.example.moviesearch.data.dto.KinopoiskResponse
import com.example.moviesearch.utils.Converter
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class Interactor(private val repo: MainRepository) {

    interface ApiCallback {
        fun onSuccess(films: List<Film>, currentPage: Int, totalPages: Int)
        fun onFailure(errorMessage: String?)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    fun getFilmsFromApi(page: Int, callback: ApiCallback) {
        Log.d("Interactor", "üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ $page...")

        RetrofitClient.kinopoiskApi.getPopularFilms(
            apiKey = RetrofitClient.getApiKey(),
            page = page
        ).enqueue(object : Callback<KinopoiskResponse> {
            override fun onResponse(
                call: Call<KinopoiskResponse>,
                response: Response<KinopoiskResponse>
            ) {
                Log.d("Interactor", "üì° –û—Ç–≤–µ—Ç –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã $page")

                if (response.isSuccessful) {
                    val body = response.body()
                    Log.d("Interactor", "‚úÖ –§–∏–ª—å–º–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${body?.docs?.size ?: 0}")

                    val films = Converter.convertApiListToDtoList(body?.docs)
                    Log.d("Interactor", "üîÑ –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${films.size} —Ñ–∏–ª—å–º–æ–≤")

                    // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤
                    films.take(2).forEachIndexed { index, film ->
                        Log.d("Interactor", "   üé¨ ${index + 1}. '${film.title}' (${film.year}) - —Ä–µ–π—Ç–∏–Ω–≥: ${film.rating}")
                    }

                    callback.onSuccess(films, body?.page ?: page, body?.pages ?: 1)
                } else {
                    handleApiError(response, callback)
                }
            }

            override fun onFailure(call: Call<KinopoiskResponse>, t: Throwable) {
                Log.e("Interactor", "‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${t.message}")
                callback.onFailure("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${t.message}")
            }
        })
    }

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    fun searchFilms(query: String, page: Int, callback: ApiCallback) {
        val normalizedQuery = query.trim()

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        if (normalizedQuery.length < 2) {
            Log.w("Interactor", "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å: '$normalizedQuery'")
            callback.onSuccess(emptyList(), page, 1)
            return
        }

        Log.d("Interactor", "üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫: '$normalizedQuery', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ $page")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        RetrofitClient.kinopoiskApi.searchFilmsOptimized(
            apiKey = RetrofitClient.getApiKey(),
            name = normalizedQuery,           // –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            alternativeName = normalizedQuery, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            enName = normalizedQuery,         // –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            page = page
        ).enqueue(object : Callback<KinopoiskResponse> {
            override fun onResponse(
                call: Call<KinopoiskResponse>,
                response: Response<KinopoiskResponse>
            ) {
                Log.d("Interactor", "üì° –û—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")

                if (response.isSuccessful) {
                    val body = response.body()
                    val rawFilms = body?.docs ?: emptyList()
                    Log.d("Interactor", "üìä API –≤–µ—Ä–Ω—É–ª ${rawFilms.size} —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '$normalizedQuery'")

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DTO –≤ –¥–æ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                    val films = Converter.convertApiListToDtoList(rawFilms)
                    Log.d("Interactor", "üîÑ –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${films.size} —Ñ–∏–ª—å–º–æ–≤")

                    // –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—à–ª–æ –æ—Ç API
                    if (films.isEmpty()) {
                        Log.w("Interactor", "‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '$normalizedQuery'")
                    } else {
                        Log.d("Interactor", "üéØ –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –§–ò–õ–¨–ú–û–í –û–¢ API:")
                        films.take(5).forEachIndexed { index, film ->
                            Log.d("Interactor", "   ${index + 1}. '${film.title}'")
                            Log.d("Interactor", "      - originalTitle: '${film.originalTitle ?: "null"}'")
                            Log.d("Interactor", "      - alternativeName: '${film.alternativeName ?: "null"}'")
                            Log.d("Interactor", "      - –≥–æ–¥: ${film.year}, —Ä–µ–π—Ç–∏–Ω–≥: ${film.rating}")

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
                            val titleMatch = film.title?.lowercase()?.contains(normalizedQuery.lowercase()) == true
                            val originalMatch = film.originalTitle?.lowercase()?.contains(normalizedQuery.lowercase()) == true
                            val alternativeMatch = film.alternativeName?.lowercase()?.contains(normalizedQuery.lowercase()) == true

                            Log.d("Interactor", "      - —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: title=$titleMatch, original=$originalMatch, alternative=$alternativeMatch")
                        }
                    }

                    // –ü–†–ò–ú–ï–ù–Ø–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö
                    Log.d("Interactor", "üîç –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫...")
                    val relevantFilms = SearchEngine.smartFilmSearch(films, normalizedQuery)

                    Log.d("Interactor", "‚úÖ –ü–æ—Å–ª–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${relevantFilms.size} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")

                    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    if (relevantFilms.isNotEmpty()) {
                        Log.d("Interactor", "üèÜ –¢–û–ü –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
                        relevantFilms.take(5).forEachIndexed { index, film ->
                            val relevanceScore = SearchEngine.calculateRelevanceScore(film, normalizedQuery)
                            Log.d("Interactor", "   ${index + 1}. '${film.title}' - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: $relevanceScore")
                            Log.d("Interactor", "      - ${SearchEngine.debugFilmSearch(film, normalizedQuery)}")
                        }
                    } else {
                        Log.w("Interactor", "‚ö†Ô∏è –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")

                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∂–µ–º –ø–æ—á–µ–º—É —Ñ–∏–ª—å–º—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏
                        if (films.isNotEmpty()) {
                            Log.d("Interactor", "üîé –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ß–ï–ú–£ –§–ò–õ–¨–ú–´ –ù–ï –ü–û–î–û–®–õ–ò:")
                            films.take(3).forEach { film ->
                                val debugInfo = SearchEngine.debugFilmSearch(film, normalizedQuery)
                                Log.d("Interactor", "   - '${film.title}': $debugInfo")
                            }
                        }
                    }

                    callback.onSuccess(relevantFilms, body?.page ?: page, body?.pages ?: 1)
                } else {
                    handleApiError(response, callback)
                }
            }

            override fun onFailure(call: Call<KinopoiskResponse>, t: Throwable) {
                Log.e("Interactor", "‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${t.message}")
                callback.onFailure("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${t.message}")
            }
        })
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
    private fun handleApiError(response: Response<*>, callback: ApiCallback) {
        val errorCode = response.code()
        val errorMessage = when (errorCode) {
            400 -> "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API (400)"
            401 -> "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á (401)"
            403 -> "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)"
            429 -> "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (500)"
            502 -> "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º (502)"
            503 -> "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503)"
            else -> "–û—à–∏–±–∫–∞ API: $errorCode"
        }

        Log.e("Interactor", "‚ùå –û—à–∏–±–∫–∞ API: $errorMessage")

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try {
            val errorBody = response.errorBody()?.string()
            if (!errorBody.isNullOrEmpty()) {
                Log.e("Interactor", "‚ùå –¢–µ–ª–æ –æ—à–∏–±–∫–∏: $errorBody")
            }
        } catch (e: Exception) {
            Log.e("Interactor", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏")
        }

        callback.onFailure(errorMessage)
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    fun quickSearch(query: String, callback: (List<Film>) -> Unit) {
        val normalizedQuery = query.trim()

        if (normalizedQuery.length < 2) {
            callback(emptyList())
            return
        }

        Log.d("Interactor", "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: '$normalizedQuery'")

        RetrofitClient.kinopoiskApi.searchFilmsOptimized(
            apiKey = RetrofitClient.getApiKey(),
            name = normalizedQuery,
            alternativeName = normalizedQuery,
            enName = normalizedQuery,
            page = 1,
            limit = 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        ).enqueue(object : Callback<KinopoiskResponse> {
            override fun onResponse(
                call: Call<KinopoiskResponse>,
                response: Response<KinopoiskResponse>
            ) {
                if (response.isSuccessful) {
                    val body = response.body()
                    val films = Converter.convertApiListToDtoList(body?.docs)
                    val relevantFilms = SearchEngine.smartFilmSearch(films, normalizedQuery)

                    Log.d("Interactor", "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª: ${relevantFilms.size} —Ñ–∏–ª—å–º–æ–≤")
                    callback(relevantFilms)
                } else {
                    Log.e("Interactor", "‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${response.code()}")
                    callback(emptyList())
                }
            }

            override fun onFailure(call: Call<KinopoiskResponse>, t: Throwable) {
                Log.e("Interactor", "‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${t.message}")
                callback(emptyList())
            }
        })
    }
}