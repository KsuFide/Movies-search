package com.example.moviesearch.domain

import android.util.Log
import com.example.moviesearch.API
import com.example.moviesearch.data.MainRepository
import com.example.moviesearch.data.TmdbApi
import com.example.moviesearch.data.dto.TmdbResultsDto
import com.example.moviesearch.utils.Converter
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class Interactor(
    private val repo: MainRepository,
    private val retrofitService: TmdbApi
) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å callback
    interface ApiCallback {
        fun onSuccess(films: List<Film>)
        fun onFailure()
    }

    fun getFilmsFromApi(page: Int, callback: ApiCallback) { // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –Ω–∞ ApiCallback
        Log.d("DEBUG", "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")

        retrofitService.getPopularFilms(API.API_KEY, "ru-RU", page)
            .enqueue(object : Callback<TmdbResultsDto> {
                override fun onResponse(
                    call: Call<TmdbResultsDto>,
                    response: Response<TmdbResultsDto>
                ) {
                    Log.d("DEBUG", "üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")
                    Log.d("DEBUG", "–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code()}")
                    Log.d("DEBUG", "–£—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å: ${response.isSuccessful}")

                    if (response.isSuccessful) {
                        val body = response.body()
                        Log.d("DEBUG", "–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: $body")
                        Log.d("DEBUG", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${body?.tmdbFilms?.size ?: 0}")

                        val films = Converter.convertApiListToDtoList(body?.tmdbFilms)
                        Log.d("DEBUG", "–ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${films.size} —Ñ–∏–ª—å–º–æ–≤")

                        callback.onSuccess(films)
                    } else {
                        Log.e("DEBUG", "‚ùå –û—à–∏–±–∫–∞ API: ${response.code()} - ${response.message()}")
                        try {
                            Log.e("DEBUG", "–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${response.errorBody()?.string()}")
                        } catch (e: Exception) {
                            Log.e("DEBUG", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏")
                        }
                        callback.onFailure()
                    }
                }

                override fun onFailure(call: Call<TmdbResultsDto>, t: Throwable) {
                    Log.e("DEBUG", "‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${t.message}")
                    t.printStackTrace()
                    callback.onFailure()
                }
            })
    }
}
