import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import com.example.moviesearch.domain.Film

object SearchEngine {

    /**
     * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @RequiresApi(Build.VERSION_CODES.O)
    fun smartFilmSearch(films: List<Film>, query: String): List<Film> {
        if (query.length < 2) return films
        if (films.isEmpty()) return emptyList()

        val normalizedQuery = normalizeQuery(query)

        Log.d("SearchEngine", "üîç –ü–æ–∏—Å–∫ '$normalizedQuery' –≤ ${films.size} —Ñ–∏–ª—å–º–∞—Ö")

        val results = films.filter { film ->
            isFilmMatchingQuery(film, normalizedQuery)
        }.sortedByDescending { film ->
            calculateRelevanceScore(film, normalizedQuery)
        }

        Log.d("SearchEngine", "‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.size} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        results.take(5).forEachIndexed { index, film ->
            Log.d(
                "SearchEngine",
                "   ${index + 1}. '${film.title}' (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${
                    calculateRelevanceScore(
                        film,
                        normalizedQuery
                    )
                })"
            )
        }

        return results
    }

    private fun normalizeQuery(query: String): String {
        return query.trim()
            .lowercase()
            .replace("[^–∞-—è—ëa-z0-9]".toRegex(), "") // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    }

    private fun isFilmMatchingQuery(film: Film, query: String): Boolean {
        // –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        val searchFields = listOf(
            film.title,
            film.originalTitle,
            film.alternativeName
        ).filterNotNull()

        return searchFields.any { field ->
            val normalizedField = normalizeField(field)

            // –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
            normalizedField.contains(query) || // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    field.contains(query, ignoreCase = true) || // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                    startsWithAnyWord(field, query) || // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞
                    containsAsSubstring(field, query) // –°–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
        }
    }

    private fun normalizeField(field: String): String {
        return field.lowercase()
            .replace("[^–∞-—è—ëa-z0-9]".toRegex(), "") // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    }

    private fun startsWithAnyWord(field: String, query: String): Boolean {
        val words = field.split(" ", "-", ":", ".", ",", "!", "?")
        return words.any { word ->
            word.lowercase().startsWith(query.lowercase()) && word.length >= 2
        }
    }

    private fun containsAsSubstring(field: String, query: String): Boolean {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫
        val cleanField = field.replace("[^–∞-—è—ëa-z0-9]".toRegex(), "").lowercase()
        val cleanQuery = query.replace("[^–∞-—è—ëa-z0-9]".toRegex(), "").lowercase()

        return cleanField.contains(cleanQuery)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    fun calculateRelevanceScore(film: Film, query: String): Int {
        var score = 0
        val normalizedQuery = query.lowercase()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        val titles = listOf(
            film.title to 100,
            film.originalTitle to 80,
            film.alternativeName to 60
        )

        titles.forEach { (title, baseScore) ->
            title?.let {
                val normalizedTitle = it.lowercase()

                when {
                    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    normalizedTitle == normalizedQuery -> score += baseScore + 100
                    // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
                    normalizedTitle.startsWith(normalizedQuery) -> score += baseScore + 50
                    // –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å
                    normalizedTitle.contains(normalizedQuery) -> score += baseScore + 20
                    // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞
                    startsWithAnyWord(it, normalizedQuery) -> score += baseScore + 30
                    // –°–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–ª–æ–≤)
                    containsAsSubstring(it, normalizedQuery) -> score += baseScore + 10
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
                if (it.equals(normalizedQuery, ignoreCase = true)) {
                    score += 50 // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                }
            }
        }

        // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥
        film.rating?.let { rating ->
            when {
                rating > 8.0 -> score += 40
                rating > 7.0 -> score += 25
                rating > 6.0 -> score += 15
                rating > 5.0 -> score += 5
            }
        }

        // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        film.year?.let { year ->
            val currentYear = java.time.Year.now().value
            when {
                year >= currentYear -> score += 30
                year >= currentYear - 2 -> score += 20
                year >= currentYear - 5 -> score += 10
            }
        }

        return score
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     */
    fun debugFilmSearch(film: Film, query: String): String {
        val normalizedQuery = query.lowercase()
        val matches = mutableListOf<String>()

        film.title?.let {
            val normalizedTitle = it.lowercase()
            when {
                normalizedTitle.contains(normalizedQuery) -> matches.add("title: '$it'")
                containsAsSubstring(it, normalizedQuery) -> matches.add("title(sub): '$it'")
                else -> {} // –¥–æ–±–∞–≤–ª—è–µ–º else –≤–µ—Ç–∫—É
            }
        }

        film.originalTitle?.let {
            val normalizedTitle = it.lowercase()
            when {
                normalizedTitle.contains(normalizedQuery) -> matches.add("originalTitle: '$it'")
                containsAsSubstring(it, normalizedQuery) -> matches.add("originalTitle(sub): '$it'")
                else -> {}
            }
        }

        film.alternativeName?.let {
            val normalizedTitle = it.lowercase()
            when {
                normalizedTitle.contains(normalizedQuery) -> matches.add("alternativeName: '$it'")
                containsAsSubstring(
                    it,
                    normalizedQuery
                ) -> matches.add("alternativeName(sub): '$it'")

                else -> {}
            }
        }

        return if (matches.isNotEmpty()) {
            "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${matches.joinToString(", ")}"
        } else {
            "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
        }
    }
}